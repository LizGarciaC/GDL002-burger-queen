{"version":3,"sources":["serviceWorker.js","Components/Login.js","firebase.js","Components/Pedidos.js","Components/Cocina.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Login","react_default","a","createElement","className","react_router_dom","to","src","id","onchange","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Pedidos","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","menu","pedidos","total","data","_this2","database","ref","once","then","snapshot","val","setState","breakfast","name","price","isNew","order","cant","newPedidos","forEach","item","push","parseInt","lunch","index","_this3","pedido","splice","products","client","employeeId","update","child","key","alert","_this4","type","value","onClick","showDesayuno","showComida","map","detail","add","delete","sendOrder","Component","Cocina","App","react_router","path","component","exact","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2HC2BSC,MAxCf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAG,YAA7B,YAC7BL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAG,WAA7B,YAEjCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWG,IAAI,uGAE9BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAKfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,cAIAH,EAAAC,EAAAC,cAAA,UAAQK,GAAG,YAAYJ,UAAU,UAAUK,SAAS,eAChDR,EAAAC,EAAAC,cAAA,UAAQK,GAAG,WACXP,EAAAC,EAAAC,cAAA,UAAQK,GAAG,SAAX,YACAP,EAAAC,EAAAC,cAAA,UAAQK,GAAG,SAAX,YACAP,EAAAC,EAAAC,cAAA,UAAQK,GAAG,SAAX,cACAP,EAAAC,EAAAC,cAAA,UAAQK,GAAG,SAAX,oCCpBvBE,IAASC,cATK,CACXC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,wCAKKR,QAAf,ECoIcS,cA3IX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,KAAM,GAAIC,QAAS,GAAIC,MAAM,EAAGC,KAAM,MAFtCX,mFAKC,IAAAY,EAAAT,KAChBd,EAASwB,WAAWC,IAAI,SAASC,KAAK,SACjCC,KAAK,SAACC,GACHL,EAAKL,MAAMI,KAAOM,EAASC,MAC3BN,EAAKO,SAAS,CACVX,KAAMI,EAAKL,MAAMI,KAAKS,0CAQlCC,EAAMC,GAEN,IAAIC,GAAQ,EACRC,EAAQ,CACRC,KAAM,EACNJ,KAAMA,EACNC,MAAOA,GAEPI,EAAavB,KAAKI,MAAME,QAE5BN,KAAKI,MAAME,QAAQkB,QAAQ,SAAAC,GACvB,GAAIA,EAAKP,OAASG,EAAMH,KAGpB,OAFAO,EAAKH,YACLF,GAAQ,KAIZA,GACAG,EAAWG,KAAKL,GAEpBrB,KAAKgB,SAAS,CACVV,QAASiB,EACThB,MAAMP,KAAKI,MAAMG,MAAQoB,SAASR,4CAKtCnB,KAAKgB,SAAS,CACVX,KAAML,KAAKI,MAAMI,KAAKS,UACtBb,MAAOJ,KAAKI,6CAKhBJ,KAAKgB,SAAS,CACVX,KAAML,KAAKI,MAAMI,KAAKoB,MACtBxB,MAAOJ,KAAKI,uCAMbc,EAAMW,GAAO,IAAAC,EAAA9B,KAEZuB,EAAavB,KAAKI,MAAME,QAE5BiB,EAAWC,QAAQ,SAACO,GACZA,EAAOb,MAAQA,IACXa,EAAOT,KAAO,EACdS,EAAOT,OAGPC,EAAWS,OAAOH,EAAO,GAE7BC,EAAKd,SAAS,CACVZ,MAAO0B,EAAK1B,+CAOxB,IAAIiB,EAAQ,CACRrC,GAAI,GACJiD,SAAUjC,KAAKI,MAAME,QACrB4B,OAAQ,GACRC,WAAY,IAGZC,EAAS,GACbA,EAAO,WAFUlD,EAASwB,WAAWC,MAAM0B,MAAM,UAAUX,OAAOY,KAEhCjB,EAClCnC,EAASwB,WAAWC,MAAMyB,OAAOA,GACjCpC,KAAKgB,SAAS,CACVZ,MAAOJ,KAAKI,MAAME,QAAQ,KAGtCiC,MAAM,mDAKO,IAAAC,EAAAxC,KACL,OACIvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,SAAS7D,UAAU,WAAW8D,MAAM,YAAYC,QAAS,WAAQH,EAAKI,kBAClFnE,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,SAAS7D,UAAU,WAAW8D,MAAM,YAAYC,QAAS,WAAQH,EAAKK,gBAClFpE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAG,WAA7B,WAC7BL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAG,KAA7B,WAG5BkB,KAAKI,MAAMC,KAAKyC,IAAI,SAACC,EAAQlB,GAAT,OACjBpD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,SAASC,MAAOK,EAAO7B,KAAO6B,EAAO5B,MAAOwB,QAAS,WAC7DH,EAAKQ,IAAID,EAAO7B,KAAM6B,EAAO5B,cAO7C1C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,sBAArB,UAA6CF,EAAAC,EAAAC,cAAA,mBAAcF,EAAAC,EAAAC,cAAA,YAC1DqB,KAAKI,MAAME,QAAQwC,IAAI,SAACC,EAAQlB,GAAT,OACpBpD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAKoE,EAAOzB,MAAU7C,EAAAC,EAAAC,cAAA,UAAKoE,EAAO7B,MAAUzC,EAAAC,EAAAC,cAAA,UAAKoE,EAAO5B,MAAQ4B,EAAOzB,MACvE7C,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,SAASC,MAAM,WAAWC,QAAS,WAAQH,EAAKS,OAAOF,EAAO7B,KAAMW,MAApF,QAGRpD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,mBACJF,EAAAC,EAAAC,cAAA,cAAMqB,KAAKI,MAAMG,SAGrB9B,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,SAAS7D,UAAU,WAAW8D,MAAM,gBAAgBC,QAAS,WAAQH,EAAKU,wBArIpFC,aC8CPC,cA9CX,SAAAA,EAAYxD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,IACfvD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsD,GAAAjD,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEE,QAAS,IAFTT,mFAOfX,EAASwB,WAAWC,IAAI,YAAYC,KAAK,SACpCC,KAAK,SAACC,GACUA,EAASC,yCAY9B,OAEItC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAG,YAA7B,YAC7BL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAG,KAA7B,sBAEjCL,EAAAC,EAAAC,cAAA,oBACCqB,KAAKI,MAAME,QAAQwC,IAAI,SAACC,EAAQlB,GAAT,OACpBpD,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,sBAArB,UAA6CF,EAAAC,EAAAC,cAAA,mBAAcF,EAAAC,EAAAC,cAAA,YAC1DoE,EAAOd,SAASa,IAAI,SAACC,EAAQlB,GAAT,OACjBpD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAKoE,EAAOzB,MAAU7C,EAAAC,EAAAC,cAAA,UAAKoE,EAAO7B,MAAUzC,EAAAC,EAAAC,cAAA,UAAKoE,EAAO5B,MAAQ4B,EAAOzB,MACvE7C,EAAAC,EAAAC,cAAA,yBAnCXwE,aCiBJE,mLAbX,OACF5E,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACE7E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWhF,EAAOiF,OAAK,IACvChF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAW7D,IAClClB,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWJ,aAPvBD,aCMlBO,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe,SNoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.1b3c3fc1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Login.css';\r\n\r\n\r\nfunction Login() {\r\n    return (\r\n        <div className='login'>\r\n            <div>\r\n                <button className='btnBase2'><Link className='noDecor' to=\"/pedidos\">Pedidos</Link></button>\r\n                <button className='btnBase2'><Link className='noDecor' to=\"/cocina\">Cocina</Link></button>\r\n            </div>\r\n            <div className='centerdiv'>\r\n            <img className='smallImg' src='https://github.com/LizGarciaC/GDL002-burger-queen/blob/master/src/images/logoBuQueen.png?raw=true'/>\r\n            </div>\r\n            <div className='logo'>\r\n           {/* </div></div> <img src=> </img> */}\r\n                {/* Burger Queen */}\r\n            </div>\r\n\r\n            <div className='footer'>\r\n                <div>\r\n                    <span className='lblUsername'> Usuario: </span>\r\n                    {/* <input className='btnBase' type='text'></input> */}\r\n\r\n\r\n                    <select id=\"seleccion\" className='btnBase' onchange=\"seleccion()\">\r\n                        <option id=\"blanco\"></option>\r\n                        <option id=\"user1\">Mesero-1</option>\r\n                        <option id=\"user2\">Mesero-2</option>\r\n                        <option id=\"user3\">Cocinero-1</option>\r\n                        <option id=\"user4\">cocinero-2</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n        \r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Login;","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBcU4u4XpyJQFrrfdISdpNhR6wij0lvcvY\",\r\n    authDomain: \"burguerqueen-6f106.firebaseapp.com\",\r\n    databaseURL: \"https://burguerqueen-6f106.firebaseio.com\",\r\n    projectId: \"burguerqueen-6f106\",\r\n    storageBucket: \"burguerqueen-6f106.appspot.com\",\r\n    messagingSenderId: \"616828888018\",\r\n    appId: \"1:616828888018:web:25a822ba6683a24a\"\r\n  };\r\n firebase.initializeApp(config);\r\n\r\n\r\n export default firebase;","\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Component } from 'react';\r\nimport firebase from '../firebase';\r\n\r\nclass Pedidos extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { menu: [], pedidos: [], total:0, data: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.database().ref('/menu').once('value')\r\n            .then((snapshot) => {\r\n                this.state.data = snapshot.val();\r\n                this.setState({\r\n                    menu: this.state.data.breakfast\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n\r\n    //Método para agregar una orden a los pedidos\r\n    add(name, price) {\r\n        // alert(name);\r\n        let isNew = true;\r\n        let order = {\r\n            cant: 1,\r\n            name: name,\r\n            price: price\r\n        };\r\n        let newPedidos = this.state.pedidos;\r\n\r\n        this.state.pedidos.forEach(item => {\r\n            if (item.name === order.name) {\r\n                item.cant++;\r\n                isNew = false;\r\n                return;\r\n            }\r\n        });\r\n        if (isNew) {\r\n            newPedidos.push(order);\r\n        }\r\n        this.setState({\r\n            pedidos: newPedidos, \r\n            total:this.state.total + parseInt(price)\r\n        });\r\n    }\r\n\r\n    showDesayuno() {\r\n        this.setState({\r\n            menu: this.state.data.breakfast,\r\n            state: this.state\r\n        });\r\n    }\r\n\r\n    showComida() {\r\n        this.setState({\r\n            menu: this.state.data.lunch,\r\n            state: this.state\r\n        });\r\n    }\r\n\r\n    //Método para borrar un elemento de la lista de  pedidos\r\n\r\n    delete(name, index) {\r\n\r\n        let newPedidos = this.state.pedidos;\r\n\r\n        newPedidos.forEach((pedido) => {\r\n            if (pedido.name == name) {\r\n                if (pedido.cant > 1) {\r\n                    pedido.cant--;\r\n                }\r\n                else {\r\n                    newPedidos.splice(index, 1);\r\n                }\r\n                this.setState({\r\n                    state: this.state\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    sendOrder() {\r\n        var order = {\r\n            id: \"\",\r\n            products: this.state.pedidos,\r\n            client: \"\",\r\n            employeeId: \"\"\r\n        }\r\n        var newPostKey = firebase.database().ref().child('orders').push().key;\r\n        var update = {};\r\n        update['/orders/' + newPostKey] = order;\r\n        firebase.database().ref().update(update);\r\n        this.setState({\r\n            state: this.state.pedidos=[]\r\n        });\r\n        \r\nalert(\"Pedido Enviado\");\r\n\r\n    }\r\n\r\n    // Imprimir en el DOM \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <input type='button' className='btnBase2' value='Desayunos' onClick={() => { this.showDesayuno(); }} />\r\n                    <input type='button' className='btnBase2' value='Almuerzos' onClick={() => { this.showComida(); }} />\r\n                    <button className='btnBase2'><Link className='noDecor' to=\"/cocina\">Cocina</Link></button>\r\n                    <button className='btnBase2'><Link className='noDecor' to=\"/\">Inicio</Link></button>\r\n\r\n\r\n                    {this.state.menu.map((detail, index) =>\r\n                        <div>\r\n                            <input type='button' value={detail.name + detail.price} onClick={() => {\r\n                                this.add(detail.name, detail.price);\r\n                            }} />\r\n                        </div>\r\n                    )}\r\n\r\n\r\n                </div>\r\n                <div>\r\n                    <h1>Pedidos</h1>\r\n                    <table>\r\n                        <tr><th>Cantidad</th><th>Producto</th>       <th>Total</th><th></th></tr>\r\n                        {this.state.pedidos.map((detail, index) =>\r\n                            <tr><td>{detail.cant}</td><td>{detail.name}</td><td>{detail.price * detail.cant}</td>\r\n                                <td><input type='button' value='Eliminar' onClick={() => { this.delete(detail.name, index); }} /> </td></tr>\r\n                        )}\r\n                        {/* <td>Total + {detail.price * detail.cant}</td> */}\r\n                        <tr><td>Total</td>\r\n                        <td>${this.state.total}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <input type='button' className='btnBase2' value='Enviar Pedido' onClick={() => { this.sendOrder(); }} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pedidos;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Component } from 'react';\r\nimport firebase from '../firebase';\r\n\r\nclass Cocina extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { pedidos: [] };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.database().ref('/orders/').once('value')\r\n            .then((snapshot) => {\r\n                let pedido = snapshot.val();\r\n\r\n                // this.setState({\r\n                //     pedidos:pedido\r\n                // });\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <div>\r\n                    <button className='btnBase2'><Link className='noDecor' to=\"/pedidos\">Pedidos</Link></button>\r\n                    <button className='btnBase2'><Link className='noDecor' to=\"/\">Cerrar Sesión</Link></button>\r\n                </div>\r\n                <h1>Cocina</h1>\r\n                {this.state.pedidos.map((detail, index) =>\r\n                    <table>\r\n                        <tr><th>Cantidad</th><th>Producto</th>       <th>Total</th><th></th></tr>\r\n                        {detail.products.map((detail, index) =>\r\n                            <tr><td>{detail.cant}</td><td>{detail.name}</td><td>{detail.price * detail.cant}</td>\r\n                                <td></td></tr>\r\n\r\n                        )}\r\n                    </table>\r\n                )}\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\nexport default Cocina;\r\n","import React,{Component} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Login from './Components/Login';\nimport Pedidos from './Components/Pedidos';\nimport Cocina from './Components/Cocina';\n\n\nclass App extends Component {\n    render(){\n      return(\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" component={Login} exact/>\n        <Route path=\"/pedidos\" component={Pedidos}/>\n        <Route path=\"/cocina\" component={Cocina}/>\n      </Switch>\n      </HashRouter>\n    );\n    }\n  \n  };\n  \n  export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n//import CardMenu from './Components/CardMenu'\n//import Menus from './Menus';\n//import App from './App';\n\n\n\n//ReactDOM.render(--que--, --donde--)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}